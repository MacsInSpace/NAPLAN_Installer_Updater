$MSIPath = "C:\ProgramData\Naplan\Temp\Naplan_Setup.msi"
$ExtractPath = "C:\ProgramData\Naplan\Temp\Naplan_Extract"

# Ensure the extraction path exists
if (!(Test-Path $ExtractPath)) { New-Item -ItemType Directory -Path $ExtractPath -Force }

# Run MSI Extraction
Start-Process -FilePath "msiexec.exe" -ArgumentList "/a `"$MSIPath`" TARGETDIR=`"$ExtractPath`" /qn" -Wait -NoNewWindow

Write-Host "MSI Extracted to: $ExtractPath"
###########################################
# Define Paths
$MSIPath = "C:\ProgramData\Naplan\Temp\Naplan_Setup.msi"
$ExtractBasePath = "C:\ProgramData\Naplan\Temp\Naplan_Extract"
$ExtractPath = "$ExtractBasePath\NAP Locked down browser\NAP Locked down browser"
$InstallPath = "C:\Program Files (x86)\NAP Locked Down Browser"

# Function to Extract MSI
function Extract-MSI {
    Write-Host "Extracting MSI to: $ExtractBasePath"
    if (Test-Path $ExtractBasePath) {
        Remove-Item -Path $ExtractBasePath -Recurse -Force -ErrorAction SilentlyContinue
    }
    New-Item -Path $ExtractBasePath -ItemType Directory -Force | Out-Null
    Start-Process "msiexec.exe" -ArgumentList "/a `"$MSIPath`" /qb TARGETDIR=`"$ExtractBasePath`"" -NoNewWindow -Wait
}

# Function to Get File List from MSI
function Get-MSIFileList {
    $installer = New-Object -ComObject WindowsInstaller.Installer
    $database = $installer.OpenDatabase($MSIPath, 0)
    $view = $database.OpenView("SELECT FileName, FileSize, Directory_ FROM File INNER JOIN Component ON File.Component_ = Component.Component")
    $view.Execute()

    $expectedFiles = @{}
    while ($record = $view.Fetch()) {
        $fileName = $record.StringData(1) -split "\|" | Select-Object -First 1
        $fileSize = $record.IntegerData(2)
        $directoryID = $record.StringData(3)

        if ($directoryID -eq "INSTALLLOCATION") {
            $fullPath = Join-Path -Path $InstallPath -ChildPath $fileName
        } else {
            $fullPath = Join-Path -Path $InstallPath -ChildPath $directoryID -ChildPath $fileName
        }

        $expectedFiles[$fullPath] = @{
            "FileName" = $fileName
            "Size" = $fileSize
        }
    }
    $view.Close()
    return $expectedFiles
}

# Function to Compare Files
function Compare-Files {
    param ($installedPath, $extractedPath)
    
    $installedFiles = Get-ChildItem -Path $installedPath -Recurse -File | ForEach-Object { $_.FullName }
    $extractedFiles = Get-ChildItem -Path $extractedPath -Recurse -File | ForEach-Object { $_.FullName }
    
    $missingFiles = @()
    $mismatchedFiles = @()
    $extraFiles = @()

    foreach ($file in $installedFiles) {
        $relativePath = $file -replace [regex]::Escape($installedPath), ""
        $compareFile = "$extractedPath$relativePath"

        if (!(Test-Path $compareFile)) {
            $missingFiles += $file
        } else {
            $installedHash = (Get-FileHash -Path $file -Algorithm SHA256).Hash
            $extractedHash = (Get-FileHash -Path $compareFile -Algorithm SHA256).Hash

            if ($installedHash -ne $extractedHash) {
                $mismatchedFiles += $file
            }
        }
    }

    foreach ($file in $extractedFiles) {
        $relativePath = $file -replace [regex]::Escape($extractedPath), ""
        $compareFile = "$installedPath$relativePath"

        if (!(Test-Path $compareFile)) {
            $extraFiles += $file
        }
    }

    return @{
        "Missing" = $missingFiles
        "Mismatched" = $mismatchedFiles
        "Extra" = $extraFiles
    }
}

# Function to Cleanup Extraction
function Cleanup-ExtractedFiles {
    Write-Host "Cleaning up extracted files: $ExtractBasePath"
    Remove-Item -Path $ExtractBasePath -Recurse -Force -ErrorAction SilentlyContinue
}

# Execution Flow
Extract-MSI
$expectedFiles = Get-MSIFileList
$compareResult = Compare-Files -installedPath $InstallPath -extractedPath $ExtractPath

# Report Issues
if ($compareResult["Missing"].Count -gt 0) {
    Write-Host "Missing Files:"
    $compareResult["Missing"] | ForEach-Object { Write-Host $_ }
}

if ($compareResult["Mismatched"].Count -gt 0) {
    Write-Host "Mismatched Files:"
    $compareResult["Mismatched"] | ForEach-Object { Write-Host $_ }
}

if ($compareResult["Extra"].Count -gt 0) {
    Write-Host "Extra Files Found:"
    $compareResult["Extra"] | ForEach-Object { Write-Host $_ }
}

# Repair if Necessary
if ($compareResult["Missing"].Count -gt 0 -or $compareResult["Mismatched"].Count -gt 0) {
    Write-Host "Repairing MSI installation..."
    Start-Process "msiexec.exe" -ArgumentList "/f `"$MSIPath`" /qn /norestart" -NoNewWindow -Wait
    Write-Host "Rechecking installation after repair..."
    $compareResult = Compare-Files -installedPath $InstallPath -extractedPath $ExtractPath

    if ($compareResult["Missing"].Count -eq 0 -and $compareResult["Mismatched"].Count -eq 0) {
        Write-Host "Repair successful."
    } else {
        Write-Host "Repair unsuccessful. Manual intervention required."
    }
} else {
    Write-Host "All files verified successfully."
}

# Cleanup Extracted Files
Cleanup-ExtractedFiles
